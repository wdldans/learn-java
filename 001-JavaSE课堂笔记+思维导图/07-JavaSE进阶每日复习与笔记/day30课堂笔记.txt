day30课堂笔记

1、掌握Map接口中常用方法。
        V put(K key,V value): 向Map集合中添加键值对
        V get(Object key): 通过key获取value
        void clear(): 清空Map集合
        boolean containsKey(Object key): 判断集合是否包含某个key
        boolean containsValue(Object value): 判断集合是否包含某个value
        boolean isEmpty(): 判断集合中元素个数是否为0
        V remove(Object key): 通过key删除键值对
        int size(): 获取Map集合的键值对个数
        Set<K> keySet(): 获取Map集合所有key
        Collection<V> values(): 获取Map集合所有value
        Set<Map.Entry<K,V>> entrySet(): 将Map集合转换成Set集合

        例如map集合：
            key      value
        -------------------------
            1      zhangsan
            2      lisi
            3      wangwu
            4      zhaoliu

       Set set = map.entrySet();
       ====>
           set集合变成：
               1=zhangsan
               2=lisi
               3=wangwu
               4=zhaoliu
           【注意：Map集合通过entrySet()方法转换成Set集合后，元素的类型是：Map.Entry<K,V>】
           【Map.Entry和String类型一样，都是一种类型的名字，只不过它是个静态内部类】

2、遍历Map集合的两种方式都要精通。
	第一种：获取所有key，遍历每个key，通过key获取value.
	第二种：获取Set<Map.Entry>即可，遍历Set集合中的Entry
		调用entry.getKey() entry.getValue()

public class HashMapTest02 {
    public static void main(String[] args) {
       Map<Integer,String> map = new HashMap<>();
       map.put(1,"zhangsan");
       map.put(2,"lisi");
       map.put(3,"wangwu");
       map.put(4,"zhaoliu");
       Set<Integer> keys = map.keySet();
       // 第一种：通过获取key 然后在获取value
       // 迭代器遍历
        Iterator<Integer> it = keys.iterator();
        while (it.hasNext()) {
            Integer key = it.next();
            System.out.println("key---"+key+" & value--"+map.get(key));
        }
        // foreach遍历
        for(Integer key: keys) {
            System.out.println("key---"+key+" & value--"+map.get(key));
        }

        /*
            第二种：Set<Map.Entry<K,V>> entrySet()
                以上是把Map集合全部转换成Set集合，Set集合的元素类型是Map.Entry
         */
        // 迭代器
        Set<Map.Entry<Integer,String>> set = map.entrySet();
        Iterator<Map.Entry<Integer,String>> it2 = set.iterator();
        while(it2.hasNext()) {
            Map.Entry<Integer,String> node = it2.next();
            Integer key = node.getKey();
            String value = node.getValue();
            System.out.println("key---"+key+" & value--"+value);
        }
        // foreach
        // 这种方式效率比较高，因为key和value都是直接从node对象中获取属性值，适合大数据量。
        for(Map.Entry<Integer,String> node : set) {
            Integer key = node.getKey();
            String value = node.getValue();
            System.out.println("key---"+key+" & value--"+value);
        }
    }
}	

    

3、了解哈希表数据结构。

4、存放在HashMap集合key部分和HashSet集合中的元素需要同时重写hashCode和equals（五颗星！！！）。

5、HashMap和Hashtable的区别。
	HashMap：
		初始化容量16，扩容2倍。
		非线程安全
		key和value可以为null。

	Hashtable
		初始化容量11，扩容2倍+1
		线程安全
		key和value都不能是null，否则报空指针异常：java.lang.NullPointerException

6、Properties类的常用两个方法。
	setProperty
	getProperty

7、了解自平衡二叉树数据结构。
	左小右大原则存储。
	中序遍历方式。

8、TreeMap的key或者TreeSet集合中的元素要想排序，有两种实现方式：
	第一种：实现java.lang.Comparable接口。
	第二种：单独编写一个比较器Comparator接口。

9、集合工具类Collections:
	synchronizedList方法
	sort方法（要求集合中元素实现Comparable接口。）